// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlclient

import (
	"fmt"
	"io"
	"strconv"
)

// supported kubernetes objects fetchable in runbooks
type KubernetesData interface {
	IsKubernetesData()
}

type AccessToken struct {
	ID         *string                     `json:"id"`
	Token      *string                     `json:"token"`
	Audits     *AccessTokenAuditConnection `json:"audits"`
	InsertedAt *string                     `json:"insertedAt"`
	UpdatedAt  *string                     `json:"updatedAt"`
}

type AccessTokenAudit struct {
	ID         *string `json:"id"`
	IP         *string `json:"ip"`
	Timestamp  *string `json:"timestamp"`
	Count      *int64  `json:"count"`
	City       *string `json:"city"`
	Country    *string `json:"country"`
	Latitude   *string `json:"latitude"`
	Longitude  *string `json:"longitude"`
	InsertedAt *string `json:"insertedAt"`
	UpdatedAt  *string `json:"updatedAt"`
}

type AccessTokenAuditConnection struct {
	PageInfo PageInfo                `json:"pageInfo"`
	Edges    []*AccessTokenAuditEdge `json:"edges"`
}

type AccessTokenAuditEdge struct {
	Node   *AccessTokenAudit `json:"node"`
	Cursor *string           `json:"cursor"`
}

type AccessTokenConnection struct {
	PageInfo PageInfo           `json:"pageInfo"`
	Edges    []*AccessTokenEdge `json:"edges"`
}

type AccessTokenEdge struct {
	Node   *AccessToken `json:"node"`
	Cursor *string      `json:"cursor"`
}

type Account struct {
	DelinquentAt       *string             `json:"delinquentAt"`
	GrandfatheredUntil *string             `json:"grandfatheredUntil"`
	AvailableFeatures  *AvailableFeatures  `json:"availableFeatures"`
	Subscription       *PluralSubscription `json:"subscription"`
}

type Application struct {
	Name          string            `json:"name"`
	Spec          ApplicationSpec   `json:"spec"`
	Status        ApplicationStatus `json:"status"`
	Cost          *CostAnalysis     `json:"cost"`
	License       *License          `json:"license"`
	Configuration *Configuration    `json:"configuration"`
	Info          *string           `json:"info"`
}

type ApplicationDelta struct {
	Delta   *Delta       `json:"delta"`
	Payload *Application `json:"payload"`
}

type ApplicationDescriptor struct {
	Type        string             `json:"type"`
	Version     string             `json:"version"`
	Description *string            `json:"description"`
	Icons       []*string          `json:"icons"`
	Links       []*ApplicationLink `json:"links"`
}

type ApplicationInfoItem struct {
	Type  *string `json:"type"`
	Name  *string `json:"name"`
	Value *string `json:"value"`
}

type ApplicationLink struct {
	URL         *string `json:"url"`
	Description *string `json:"description"`
}

type ApplicationSpec struct {
	Descriptor ApplicationDescriptor  `json:"descriptor"`
	Components []*Component           `json:"components"`
	Info       []*ApplicationInfoItem `json:"info"`
}

type ApplicationStatus struct {
	Components      []*StatusComponent `json:"components"`
	Conditions      []*StatusCondition `json:"conditions"`
	ComponentsReady string             `json:"componentsReady"`
}

type Audit struct {
	ID         string      `json:"id"`
	Action     AuditAction `json:"action"`
	Type       AuditType   `json:"type"`
	Repository *string     `json:"repository"`
	IP         *string     `json:"ip"`
	City       *string     `json:"city"`
	Country    *string     `json:"country"`
	Latitude   *string     `json:"latitude"`
	Longitude  *string     `json:"longitude"`
	Actor      *User       `json:"actor"`
	InsertedAt *string     `json:"insertedAt"`
	UpdatedAt  *string     `json:"updatedAt"`
}

type AuditConnection struct {
	PageInfo PageInfo     `json:"pageInfo"`
	Edges    []*AuditEdge `json:"edges"`
}

type AuditEdge struct {
	Node   *Audit  `json:"node"`
	Cursor *string `json:"cursor"`
}

type AuditMetric struct {
	Country *string `json:"country"`
	Count   *int64  `json:"count"`
}

type AvailableFeatures struct {
	Vpn                *bool `json:"vpn"`
	Audits             *bool `json:"audits"`
	UserManagement     *bool `json:"userManagement"`
	DatabaseManagement *bool `json:"databaseManagement"`
}

type AwsCloud struct {
	LaunchTemplateID *string `json:"launchTemplateId"`
}

type AwsCloudAttributes struct {
	LaunchTemplateID *string `json:"launchTemplateId,omitempty"`
}

type AwsSettingsAttributes struct {
	AccessKeyID     string `json:"accessKeyId"`
	SecretAccessKey string `json:"secretAccessKey"`
}

type BindingAttributes struct {
	ID      *string `json:"id,omitempty"`
	UserID  *string `json:"userId,omitempty"`
	GroupID *string `json:"groupId,omitempty"`
}

type Build struct {
	ID          string             `json:"id"`
	Repository  string             `json:"repository"`
	Type        BuildType          `json:"type"`
	Status      Status             `json:"status"`
	Message     *string            `json:"message"`
	CompletedAt *string            `json:"completedAt"`
	Sha         *string            `json:"sha"`
	Commands    *CommandConnection `json:"commands"`
	Creator     *User              `json:"creator"`
	Approver    *User              `json:"approver"`
	Changelogs  []*Changelog       `json:"changelogs"`
	InsertedAt  *string            `json:"insertedAt"`
	UpdatedAt   *string            `json:"updatedAt"`
}

type BuildAttributes struct {
	Repository string     `json:"repository"`
	Type       *BuildType `json:"type,omitempty"`
	Message    *string    `json:"message,omitempty"`
}

type BuildConnection struct {
	PageInfo PageInfo     `json:"pageInfo"`
	Edges    []*BuildEdge `json:"edges"`
}

type BuildDelta struct {
	Delta   *Delta `json:"delta"`
	Payload *Build `json:"payload"`
}

type BuildEdge struct {
	Node   *Build  `json:"node"`
	Cursor *string `json:"cursor"`
}

type BuildInfo struct {
	All        *int64 `json:"all"`
	Failed     *int64 `json:"failed"`
	Queued     *int64 `json:"queued"`
	Running    *int64 `json:"running"`
	Successful *int64 `json:"successful"`
}

type Certificate struct {
	Metadata Metadata          `json:"metadata"`
	Status   CertificateStatus `json:"status"`
	Spec     CertificateSpec   `json:"spec"`
	Raw      string            `json:"raw"`
	Events   []*Event          `json:"events"`
}

type CertificateSpec struct {
	DNSNames   []*string  `json:"dnsNames"`
	SecretName string     `json:"secretName"`
	IssuerRef  *IssuerRef `json:"issuerRef"`
}

type CertificateStatus struct {
	Conditions  []*StatusCondition `json:"conditions"`
	NotAfter    *string            `json:"notAfter"`
	NotBefore   *string            `json:"notBefore"`
	RenewalTime *string            `json:"renewalTime"`
}

type Changelog struct {
	ID         string  `json:"id"`
	Repo       string  `json:"repo"`
	Tool       string  `json:"tool"`
	Content    *string `json:"content"`
	InsertedAt *string `json:"insertedAt"`
	UpdatedAt  *string `json:"updatedAt"`
}

type CloneAttributes struct {
	S3AccessKeyID     *string `json:"s3AccessKeyId,omitempty"`
	S3SecretAccessKey *string `json:"s3SecretAccessKey,omitempty"`
	S3WalPath         *string `json:"s3WalPath,omitempty"`
	S3Endpoint        *string `json:"s3Endpoint,omitempty"`
	UID               *string `json:"uid,omitempty"`
}

type CloudProviderSettingsAttributes struct {
	Aws *AwsSettingsAttributes `json:"aws,omitempty"`
	Gcp *GcpSettingsAttributes `json:"gcp,omitempty"`
}

type CloudSettings struct {
	Aws *AwsCloud `json:"aws"`
}

type CloudSettingsAttributes struct {
	Aws *AwsCloudAttributes `json:"aws,omitempty"`
}

type Cluster struct {
	ID             string             `json:"id"`
	Name           string             `json:"name"`
	Version        string             `json:"version"`
	CurrentVersion *string            `json:"currentVersion"`
	DeletedAt      *string            `json:"deletedAt"`
	PingedAt       *string            `json:"pingedAt"`
	ReadBindings   []*PolicyBinding   `json:"readBindings"`
	WriteBindings  []*PolicyBinding   `json:"writeBindings"`
	NodePools      []*NodePool        `json:"nodePools"`
	Provider       *ClusterProvider   `json:"provider"`
	Service        *ServiceDeployment `json:"service"`
	Editable       *bool              `json:"editable"`
	InsertedAt     *string            `json:"insertedAt"`
	UpdatedAt      *string            `json:"updatedAt"`
}

type ClusterAttributes struct {
	Name          string                     `json:"name"`
	ProviderID    *string                    `json:"providerId,omitempty"`
	Version       string                     `json:"version"`
	NodePools     []*NodePoolAttributes      `json:"nodePools,omitempty"`
	ReadBindings  []*PolicyBindingAttributes `json:"readBindings,omitempty"`
	WriteBindings []*PolicyBindingAttributes `json:"writeBindings,omitempty"`
}

type ClusterConnection struct {
	PageInfo PageInfo       `json:"pageInfo"`
	Edges    []*ClusterEdge `json:"edges"`
}

type ClusterEdge struct {
	Node   *Cluster `json:"node"`
	Cursor *string  `json:"cursor"`
}

type ClusterInfo struct {
	GitCommit  *string `json:"gitCommit"`
	GitVersion *string `json:"gitVersion"`
	Platform   *string `json:"platform"`
	Version    *string `json:"version"`
}

type ClusterPing struct {
	CurrentVersion string `json:"currentVersion"`
}

type ClusterProvider struct {
	ID         string             `json:"id"`
	Name       string             `json:"name"`
	Namespace  string             `json:"namespace"`
	Cloud      string             `json:"cloud"`
	Git        GitRef             `json:"git"`
	Repository *GitRepository     `json:"repository"`
	Service    *ServiceDeployment `json:"service"`
	Editable   *bool              `json:"editable"`
	InsertedAt *string            `json:"insertedAt"`
	UpdatedAt  *string            `json:"updatedAt"`
}

type ClusterProviderAttributes struct {
	Name          string                           `json:"name"`
	Namespace     *string                          `json:"namespace,omitempty"`
	Cloud         *string                          `json:"cloud,omitempty"`
	CloudSettings *CloudProviderSettingsAttributes `json:"cloudSettings,omitempty"`
}

type ClusterProviderConnection struct {
	PageInfo PageInfo               `json:"pageInfo"`
	Edges    []*ClusterProviderEdge `json:"edges"`
}

type ClusterProviderEdge struct {
	Node   *ClusterProvider `json:"node"`
	Cursor *string          `json:"cursor"`
}

type ClusterProviderUpdateAttributes struct {
	CloudSettings *CloudProviderSettingsAttributes `json:"cloudSettings,omitempty"`
}

type ClusterUpdateAttributes struct {
	Version       string                     `json:"version"`
	NodePools     []*NodePoolAttributes      `json:"nodePools,omitempty"`
	ReadBindings  []*PolicyBindingAttributes `json:"readBindings,omitempty"`
	WriteBindings []*PolicyBindingAttributes `json:"writeBindings,omitempty"`
}

type Command struct {
	ID          string  `json:"id"`
	Command     string  `json:"command"`
	ExitCode    *int64  `json:"exitCode"`
	Stdout      *string `json:"stdout"`
	CompletedAt *string `json:"completedAt"`
	Build       *Build  `json:"build"`
	InsertedAt  *string `json:"insertedAt"`
	UpdatedAt   *string `json:"updatedAt"`
}

type CommandConnection struct {
	PageInfo PageInfo       `json:"pageInfo"`
	Edges    []*CommandEdge `json:"edges"`
}

type CommandDelta struct {
	Delta   *Delta   `json:"delta"`
	Payload *Command `json:"payload"`
}

type CommandEdge struct {
	Node   *Command `json:"node"`
	Cursor *string  `json:"cursor"`
}

type Component struct {
	Group string `json:"group"`
	Kind  string `json:"kind"`
}

type ComponentAttributes struct {
	State     *ComponentState `json:"state,omitempty"`
	Synced    bool            `json:"synced"`
	Group     string          `json:"group"`
	Version   string          `json:"version"`
	Kind      string          `json:"kind"`
	Namespace string          `json:"namespace"`
	Name      string          `json:"name"`
}

type ConfigAttributes struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ConfigMap struct {
	Metadata Metadata               `json:"metadata"`
	Data     map[string]interface{} `json:"data"`
	Raw      string                 `json:"raw"`
}

type Configuration struct {
	Terraform *string `json:"terraform"`
	Helm      *string `json:"helm"`
}

type ConfigurationAction struct {
	Updates []*PathUpdate `json:"updates"`
}

type ConfigurationCondition struct {
	Field     *string `json:"field"`
	Value     *string `json:"value"`
	Operation *string `json:"operation"`
}

type ConfigurationItem struct {
	Name          *string                  `json:"name"`
	Type          *string                  `json:"type"`
	Placeholder   *string                  `json:"placeholder"`
	Documentation *string                  `json:"documentation"`
	Default       *string                  `json:"default"`
	Optional      *bool                    `json:"optional"`
	Condition     *ConfigurationCondition  `json:"condition"`
	Validation    *ConfigurationValidation `json:"validation"`
}

type ConfigurationOverlay struct {
	Metadata Metadata                 `json:"metadata"`
	Spec     ConfigurationOverlaySpec `json:"spec"`
}

type ConfigurationOverlaySpec struct {
	Name          *string          `json:"name"`
	Folder        *string          `json:"folder"`
	Subfolder     *string          `json:"subfolder"`
	Documentation *string          `json:"documentation"`
	Updates       []*OverlayUpdate `json:"updates"`
	InputType     *string          `json:"inputType"`
	InputValues   []*string        `json:"inputValues"`
}

type ConfigurationValidation struct {
	Type    *string `json:"type"`
	Regex   *string `json:"regex"`
	Message *string `json:"message"`
}

type ConsoleConfiguration struct {
	GitCommit     *string            `json:"gitCommit"`
	IsDemoProject *bool              `json:"isDemoProject"`
	IsSandbox     *bool              `json:"isSandbox"`
	PluralLogin   *bool              `json:"pluralLogin"`
	VpnEnabled    *bool              `json:"vpnEnabled"`
	Features      *AvailableFeatures `json:"features"`
	Manifest      *PluralManifest    `json:"manifest"`
	GitStatus     *GitStatus         `json:"gitStatus"`
}

type Container struct {
	Image     *string    `json:"image"`
	Name      *string    `json:"name"`
	Ports     []*Port    `json:"ports"`
	Resources *Resources `json:"resources"`
}

type ContainerRecommendation struct {
	Name           *string             `json:"name"`
	ContainerName  *string             `json:"containerName"`
	Target         *ContainerResources `json:"target"`
	LowerBound     *ContainerResources `json:"lowerBound"`
	UpperBound     *ContainerResources `json:"upperBound"`
	UncappedTarget *ContainerResources `json:"uncappedTarget"`
}

type ContainerResources struct {
	CPU    *string `json:"cpu"`
	Memory *string `json:"memory"`
}

type ContainerState struct {
	Running    *RunningState    `json:"running"`
	Terminated *TerminatedState `json:"terminated"`
	Waiting    *WaitingState    `json:"waiting"`
}

type ContainerStatus struct {
	RestartCount *int64          `json:"restartCount"`
	Ready        *bool           `json:"ready"`
	Name         *string         `json:"name"`
	Image        *string         `json:"image"`
	State        *ContainerState `json:"state"`
}

type ContextAttributes struct {
	Buckets       []*string              `json:"buckets,omitempty"`
	Domain        []*string              `json:"domain,omitempty"`
	Configuration map[string]interface{} `json:"configuration"`
	Protect       []*string              `json:"protect,omitempty"`
}

type CostAnalysis struct {
	Minutes       *float64 `json:"minutes"`
	CPUCost       *float64 `json:"cpuCost"`
	CPUEfficiency *float64 `json:"cpuEfficiency"`
	Efficiency    *float64 `json:"efficiency"`
	GpuCost       *float64 `json:"gpuCost"`
	NetworkCost   *float64 `json:"networkCost"`
	PvCost        *float64 `json:"pvCost"`
	RAMCost       *float64 `json:"ramCost"`
	RAMEfficiency *float64 `json:"ramEfficiency"`
	TotalCost     *float64 `json:"totalCost"`
	SharedCost    *float64 `json:"sharedCost"`
}

type CronJob struct {
	Metadata Metadata   `json:"metadata"`
	Status   CronStatus `json:"status"`
	Spec     CronSpec   `json:"spec"`
	Raw      string     `json:"raw"`
	Events   []*Event   `json:"events"`
	Jobs     []*Job     `json:"jobs"`
}

type CronSpec struct {
	Schedule          string  `json:"schedule"`
	Suspend           *bool   `json:"suspend"`
	ConcurrencyPolicy *string `json:"concurrencyPolicy"`
}

type CronStatus struct {
	Active           []*JobReference `json:"active"`
	LastScheduleTime *string         `json:"lastScheduleTime"`
}

type CrossVersionResourceTarget struct {
	APIVersion *string `json:"apiVersion"`
	Kind       *string `json:"kind"`
	Name       *string `json:"name"`
}

type Dashboard struct {
	ID   string        `json:"id"`
	Spec DashboardSpec `json:"spec"`
}

type DashboardGraph struct {
	Name    string             `json:"name"`
	Queries []*DashboardMetric `json:"queries"`
	Format  *string            `json:"format"`
}

type DashboardLabel struct {
	Name   string    `json:"name"`
	Values []*string `json:"values"`
}

type DashboardMetric struct {
	Legend  *string         `json:"legend"`
	Query   *string         `json:"query"`
	Results []*MetricResult `json:"results"`
}

type DashboardSpec struct {
	Name        *string           `json:"name"`
	Description *string           `json:"description"`
	Timeslices  []*string         `json:"timeslices"`
	Labels      []*DashboardLabel `json:"labels"`
	Graphs      []*DashboardGraph `json:"graphs"`
}

type DatabaseVolume struct {
	Size *string `json:"size"`
}

type Deployment struct {
	Metadata Metadata         `json:"metadata"`
	Status   DeploymentStatus `json:"status"`
	Spec     DeploymentSpec   `json:"spec"`
	Pods     []*Pod           `json:"pods"`
	Raw      string           `json:"raw"`
	Events   []*Event         `json:"events"`
}

func (Deployment) IsKubernetesData() {}

type DeploymentSettings struct {
	ID                 string           `json:"id"`
	Name               string           `json:"name"`
	ArtifactRepository *GitRepository   `json:"artifactRepository"`
	DeployerRepository *GitRepository   `json:"deployerRepository"`
	ReadBindings       []*PolicyBinding `json:"readBindings"`
	WriteBindings      []*PolicyBinding `json:"writeBindings"`
	GitBindings        []*PolicyBinding `json:"gitBindings"`
	CreateBindings     []*PolicyBinding `json:"createBindings"`
	InsertedAt         *string          `json:"insertedAt"`
	UpdatedAt          *string          `json:"updatedAt"`
}

type DeploymentSettingsAttributes struct {
	ArtifactRepositoryID *string                    `json:"artifactRepositoryId,omitempty"`
	DeployerRepositoryID *string                    `json:"deployerRepositoryId,omitempty"`
	ReadBindings         []*PolicyBindingAttributes `json:"readBindings,omitempty"`
	WriteBindings        []*PolicyBindingAttributes `json:"writeBindings,omitempty"`
	GitBindings          []*PolicyBindingAttributes `json:"gitBindings,omitempty"`
	CreateBindings       []*PolicyBindingAttributes `json:"createBindings,omitempty"`
}

type DeploymentSpec struct {
	Replicas *int64              `json:"replicas"`
	Strategy *DeploymentStrategy `json:"strategy"`
}

type DeploymentStatus struct {
	AvailableReplicas   *int64 `json:"availableReplicas"`
	Replicas            *int64 `json:"replicas"`
	ReadyReplicas       *int64 `json:"readyReplicas"`
	UnavailableReplicas *int64 `json:"unavailableReplicas"`
}

type DeploymentStrategy struct {
	Type          *string        `json:"type"`
	RollingUpdate *RollingUpdate `json:"rollingUpdate"`
}

type Event struct {
	Action        *string `json:"action"`
	Count         *int64  `json:"count"`
	EventTime     *string `json:"eventTime"`
	LastTimestamp *string `json:"lastTimestamp"`
	Message       *string `json:"message"`
	Reason        *string `json:"reason"`
	Type          *string `json:"type"`
}

type FileContent struct {
	Path    *string `json:"path"`
	Content *string `json:"content"`
}

type GcpSettingsAttributes struct {
	ApplicationCredentials string `json:"applicationCredentials"`
}

type GitAttributes struct {
	URL        string  `json:"url"`
	PrivateKey *string `json:"privateKey,omitempty"`
	Passphrase *string `json:"passphrase,omitempty"`
	Username   *string `json:"username,omitempty"`
	Password   *string `json:"password,omitempty"`
}

type GitRef struct {
	Ref    string `json:"ref"`
	Folder string `json:"folder"`
}

type GitRefAttributes struct {
	Ref    string `json:"ref"`
	Folder string `json:"folder"`
}

type GitRepository struct {
	ID         string      `json:"id"`
	URL        string      `json:"url"`
	AuthMethod *AuthMethod `json:"authMethod"`
	Health     *GitHealth  `json:"health"`
	PulledAt   *string     `json:"pulledAt"`
	Editable   *bool       `json:"editable"`
	InsertedAt *string     `json:"insertedAt"`
	UpdatedAt  *string     `json:"updatedAt"`
}

type GitRepositoryConnection struct {
	PageInfo PageInfo             `json:"pageInfo"`
	Edges    []*GitRepositoryEdge `json:"edges"`
}

type GitRepositoryEdge struct {
	Node   *GitRepository `json:"node"`
	Cursor *string        `json:"cursor"`
}

type GitStatus struct {
	Cloned *bool   `json:"cloned"`
	Output *string `json:"output"`
}

type Group struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	InsertedAt  *string `json:"insertedAt"`
	UpdatedAt   *string `json:"updatedAt"`
}

type GroupAttributes struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
}

type GroupConnection struct {
	PageInfo PageInfo     `json:"pageInfo"`
	Edges    []*GroupEdge `json:"edges"`
}

type GroupEdge struct {
	Node   *Group  `json:"node"`
	Cursor *string `json:"cursor"`
}

type GroupMember struct {
	ID         string  `json:"id"`
	User       *User   `json:"user"`
	Group      *Group  `json:"group"`
	InsertedAt *string `json:"insertedAt"`
	UpdatedAt  *string `json:"updatedAt"`
}

type GroupMemberConnection struct {
	PageInfo PageInfo           `json:"pageInfo"`
	Edges    []*GroupMemberEdge `json:"edges"`
}

type GroupMemberEdge struct {
	Node   *GroupMember `json:"node"`
	Cursor *string      `json:"cursor"`
}

type HTTPIngressRule struct {
	Paths []*IngressPath `json:"paths"`
}

type Ingress struct {
	Metadata     Metadata       `json:"metadata"`
	Status       ServiceStatus  `json:"status"`
	Spec         IngressSpec    `json:"spec"`
	Certificates []*Certificate `json:"certificates"`
	Raw          string         `json:"raw"`
	Events       []*Event       `json:"events"`
}

type IngressBackend struct {
	ServiceName *string `json:"serviceName"`
	ServicePort *string `json:"servicePort"`
}

type IngressPath struct {
	Backend *IngressBackend `json:"backend"`
	Path    *string         `json:"path"`
}

type IngressRule struct {
	Host *string          `json:"host"`
	HTTP *HTTPIngressRule `json:"http"`
}

type IngressSpec struct {
	Rules []*IngressRule `json:"rules"`
	TLS   []*IngressTLS  `json:"tls"`
}

type IngressTLS struct {
	Hosts []*string `json:"hosts"`
}

type Installation struct {
	ID         string      `json:"id"`
	Repository *Repository `json:"repository"`
}

type InstallationConnection struct {
	PageInfo PageInfo            `json:"pageInfo"`
	Edges    []*InstallationEdge `json:"edges"`
}

type InstallationEdge struct {
	Node   *Installation `json:"node"`
	Cursor *string       `json:"cursor"`
}

type Invite struct {
	SecureID string  `json:"secureId"`
	Email    *string `json:"email"`
}

type InviteAttributes struct {
	Email *string `json:"email,omitempty"`
}

type IssuerRef struct {
	Group *string `json:"group"`
	Kind  *string `json:"kind"`
	Name  *string `json:"name"`
}

type Job struct {
	Metadata Metadata  `json:"metadata"`
	Status   JobStatus `json:"status"`
	Spec     JobSpec   `json:"spec"`
	Raw      string    `json:"raw"`
	Events   []*Event  `json:"events"`
	Pods     []*Pod    `json:"pods"`
}

type JobReference struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

type JobSpec struct {
	BackoffLimit          *int64 `json:"backoffLimit"`
	Parallelism           *int64 `json:"parallelism"`
	ActiveDeadlineSeconds *int64 `json:"activeDeadlineSeconds"`
}

type JobStatus struct {
	Active         *int64  `json:"active"`
	CompletionTime *string `json:"completionTime"`
	StartTime      *string `json:"startTime"`
	Succeeded      *int64  `json:"succeeded"`
	Failed         *int64  `json:"failed"`
}

type KubernetesDatasource struct {
	Resource string `json:"resource"`
	Name     string `json:"name"`
}

type LabelInput struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type LabelPair struct {
	Name  *string `json:"name"`
	Value *string `json:"value"`
}

type License struct {
	Metadata Metadata       `json:"metadata"`
	Spec     LicenseSpec    `json:"spec"`
	Status   *LicenseStatus `json:"status"`
}

type LicenseFeature struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

type LicenseSpec struct {
	SecretRef SecretKeySelector `json:"secretRef"`
}

type LicenseStatus struct {
	Plan     *string                `json:"plan"`
	Free     *bool                  `json:"free"`
	Features []*LicenseFeature      `json:"features"`
	Limits   map[string]interface{} `json:"limits"`
	Secrets  map[string]interface{} `json:"secrets"`
}

type LoadBalancerIngressStatus struct {
	Hostname *string `json:"hostname"`
	IP       *string `json:"ip"`
}

type LoadBalancerStatus struct {
	Ingress []*LoadBalancerIngressStatus `json:"ingress"`
}

type LogFilter struct {
	Metadata Metadata      `json:"metadata"`
	Spec     LogFilterSpec `json:"spec"`
}

type LogFilterSpec struct {
	Name        *string     `json:"name"`
	Description *string     `json:"description"`
	Query       *string     `json:"query"`
	Labels      []*LogLabel `json:"labels"`
}

type LogLabel struct {
	Name  *string `json:"name"`
	Value *string `json:"value"`
}

type LogStream struct {
	Stream map[string]interface{} `json:"stream"`
	Values []*MetricResult        `json:"values"`
}

type LoginInfo struct {
	OidcURI *string `json:"oidcUri"`
}

type ManifestNetwork struct {
	PluralDNS *bool   `json:"pluralDns"`
	Subdomain *string `json:"subdomain"`
}

type Metadata struct {
	Labels            []*LabelPair `json:"labels"`
	Annotations       []*LabelPair `json:"annotations"`
	Name              string       `json:"name"`
	Namespace         *string      `json:"namespace"`
	CreationTimestamp *string      `json:"creationTimestamp"`
}

type MetricResponse struct {
	Metric map[string]interface{} `json:"metric"`
	Values []*MetricResult        `json:"values"`
}

type MetricResult struct {
	Timestamp *int64  `json:"timestamp"`
	Value     *string `json:"value"`
}

type Namespace struct {
	Status   NamespaceStatus `json:"status"`
	Spec     NamespaceSpec   `json:"spec"`
	Metadata Metadata        `json:"metadata"`
	Raw      string          `json:"raw"`
	Events   []*Event        `json:"events"`
}

type NamespaceSpec struct {
	Finalizers []*string `json:"finalizers"`
}

type NamespaceStatus struct {
	Phase *string `json:"phase"`
}

type Node struct {
	Status   NodeStatus `json:"status"`
	Spec     NodeSpec   `json:"spec"`
	Metadata Metadata   `json:"metadata"`
	Raw      string     `json:"raw"`
	Pods     []*Pod     `json:"pods"`
	Events   []*Event   `json:"events"`
}

type NodeCondition struct {
	Message *string `json:"message"`
	Reason  *string `json:"reason"`
	Status  *string `json:"status"`
	Type    *string `json:"type"`
}

type NodeMetric struct {
	Metadata  Metadata   `json:"metadata"`
	Timestamp *string    `json:"timestamp"`
	Window    *string    `json:"window"`
	Usage     *NodeUsage `json:"usage"`
}

type NodePool struct {
	ID            string                 `json:"id"`
	Name          string                 `json:"name"`
	MinSize       int64                  `json:"minSize"`
	MaxSize       int64                  `json:"maxSize"`
	InstanceType  string                 `json:"instanceType"`
	Labels        map[string]interface{} `json:"labels"`
	Taints        []*Taint               `json:"taints"`
	CloudSettings *CloudSettings         `json:"cloudSettings"`
	InsertedAt    *string                `json:"insertedAt"`
	UpdatedAt     *string                `json:"updatedAt"`
}

type NodePoolAttributes struct {
	Name          string                   `json:"name"`
	MinSize       int64                    `json:"minSize"`
	MaxSize       int64                    `json:"maxSize"`
	InstanceType  string                   `json:"instanceType"`
	Labels        map[string]interface{}   `json:"labels,omitempty"`
	Taints        []*TaintAttributes       `json:"taints,omitempty"`
	CloudSettings *CloudSettingsAttributes `json:"cloudSettings,omitempty"`
}

type NodeSpec struct {
	PodCidr       *string `json:"podCidr"`
	ProviderID    *string `json:"providerId"`
	Unschedulable *bool   `json:"unschedulable"`
}

type NodeStatus struct {
	Allocatable map[string]interface{} `json:"allocatable"`
	Capacity    map[string]interface{} `json:"capacity"`
	Phase       *string                `json:"phase"`
	Conditions  []*NodeCondition       `json:"conditions"`
}

type NodeUsage struct {
	CPU    *string `json:"cpu"`
	Memory *string `json:"memory"`
}

type Notification struct {
	ID          string                 `json:"id"`
	Title       string                 `json:"title"`
	Description *string                `json:"description"`
	Fingerprint string                 `json:"fingerprint"`
	Status      *NotificationStatus    `json:"status"`
	Labels      map[string]interface{} `json:"labels"`
	Annotations map[string]interface{} `json:"annotations"`
	Repository  string                 `json:"repository"`
	SeenAt      *string                `json:"seenAt"`
	Severity    *Severity              `json:"severity"`
	InsertedAt  *string                `json:"insertedAt"`
	UpdatedAt   *string                `json:"updatedAt"`
}

type NotificationConnection struct {
	PageInfo PageInfo            `json:"pageInfo"`
	Edges    []*NotificationEdge `json:"edges"`
}

type NotificationDelta struct {
	Delta   *Delta        `json:"delta"`
	Payload *Notification `json:"payload"`
}

type NotificationEdge struct {
	Node   *Notification `json:"node"`
	Cursor *string       `json:"cursor"`
}

type OverlayUpdate struct {
	Path []*string `json:"path"`
}

type PageInfo struct {
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor"`
}

type PathUpdate struct {
	Path      []*string `json:"path"`
	ValueFrom string    `json:"valueFrom"`
}

type Plan struct {
	ID     *string `json:"id"`
	Name   *string `json:"name"`
	Period *string `json:"period"`
}

type PluralContext struct {
	Buckets       []*string              `json:"buckets"`
	Domains       []*string              `json:"domains"`
	Configuration map[string]interface{} `json:"configuration"`
}

type PluralManifest struct {
	Network      *ManifestNetwork `json:"network"`
	BucketPrefix *string          `json:"bucketPrefix"`
	Cluster      *string          `json:"cluster"`
}

type PluralSubscription struct {
	ID   *string `json:"id"`
	Plan *Plan   `json:"plan"`
}

type Pod struct {
	Status   PodStatus `json:"status"`
	Spec     PodSpec   `json:"spec"`
	Metadata Metadata  `json:"metadata"`
	Raw      string    `json:"raw"`
	Events   []*Event  `json:"events"`
}

type PodCondition struct {
	LastProbeTime      *string `json:"lastProbeTime"`
	LastTransitionTime *string `json:"lastTransitionTime"`
	Message            *string `json:"message"`
	Reason             *string `json:"reason"`
	Status             *string `json:"status"`
	Type               *string `json:"type"`
}

type PodConnection struct {
	PageInfo PageInfo   `json:"pageInfo"`
	Edges    []*PodEdge `json:"edges"`
}

type PodDelta struct {
	Delta   *Delta `json:"delta"`
	Payload *Pod   `json:"payload"`
}

type PodEdge struct {
	Node   *Pod    `json:"node"`
	Cursor *string `json:"cursor"`
}

type PodSpec struct {
	ServiceAccountName *string      `json:"serviceAccountName"`
	NodeName           *string      `json:"nodeName"`
	Containers         []*Container `json:"containers"`
	InitContainers     []*Container `json:"initContainers"`
}

type PodStatus struct {
	Message               *string            `json:"message"`
	Phase                 *string            `json:"phase"`
	HostIP                *string            `json:"hostIp"`
	PodIP                 *string            `json:"podIp"`
	Reason                *string            `json:"reason"`
	Conditions            []*PodCondition    `json:"conditions"`
	ContainerStatuses     []*ContainerStatus `json:"containerStatuses"`
	InitContainerStatuses []*ContainerStatus `json:"initContainerStatuses"`
}

type PolicyBinding struct {
	ID    *string `json:"id"`
	User  *User   `json:"user"`
	Group *Group  `json:"group"`
}

type PolicyBindingAttributes struct {
	ID      *string `json:"id,omitempty"`
	UserID  *string `json:"userId,omitempty"`
	GroupID *string `json:"groupId,omitempty"`
}

type Port struct {
	HostPort      *int64  `json:"hostPort"`
	ContainerPort *int64  `json:"containerPort"`
	Protocol      *string `json:"protocol"`
}

type PostgresInstance struct {
	UID string `json:"uid"`
}

type PostgresSettings struct {
	Version *string `json:"version"`
}

type Postgresql struct {
	Metadata  Metadata            `json:"metadata"`
	Spec      PostgresqlSpec      `json:"spec"`
	Status    *PostgresqlStatus   `json:"status"`
	Instances []*PostgresInstance `json:"instances"`
}

type PostgresqlSpec struct {
	TeamID            *string                `json:"teamId"`
	Users             map[string]interface{} `json:"users"`
	Resources         *Resources             `json:"resources"`
	Postgresql        *PostgresSettings      `json:"postgresql"`
	NumberOfInstances *int64                 `json:"numberOfInstances"`
	Databases         map[string]interface{} `json:"databases"`
	Volume            *DatabaseVolume        `json:"volume"`
	Pods              []*Pod                 `json:"pods"`
}

type PostgresqlStatus struct {
	ClusterStatus *string `json:"clusterStatus"`
}

type PrometheusDatasource struct {
	Query  string  `json:"query"`
	Format *string `json:"format"`
	Legend *string `json:"legend"`
}

type RbacAttributes struct {
	ReadBindings  []*PolicyBindingAttributes `json:"readBindings,omitempty"`
	WriteBindings []*PolicyBindingAttributes `json:"writeBindings,omitempty"`
}

type Recipe struct {
	ID             string           `json:"id"`
	Name           string           `json:"name"`
	Description    *string          `json:"description"`
	Provider       *string          `json:"provider"`
	Restricted     *bool            `json:"restricted"`
	RecipeSections []*RecipeSection `json:"recipeSections"`
	OidcEnabled    *bool            `json:"oidcEnabled"`
}

type RecipeConnection struct {
	PageInfo PageInfo      `json:"pageInfo"`
	Edges    []*RecipeEdge `json:"edges"`
}

type RecipeEdge struct {
	Node   *Recipe `json:"node"`
	Cursor *string `json:"cursor"`
}

type RecipeItem struct {
	ID            string               `json:"id"`
	Configuration []*ConfigurationItem `json:"configuration"`
}

type RecipeSection struct {
	ID            string               `json:"id"`
	Repository    *Repository          `json:"repository"`
	RecipeItems   []*RecipeItem        `json:"recipeItems"`
	Configuration []*ConfigurationItem `json:"configuration"`
}

type Recommendation struct {
	ContainerRecommendations []*ContainerRecommendation `json:"containerRecommendations"`
}

type Repository struct {
	ID            string         `json:"id"`
	Name          string         `json:"name"`
	Description   *string        `json:"description"`
	Icon          *string        `json:"icon"`
	Docs          []*FileContent `json:"docs"`
	Configuration *Configuration `json:"configuration"`
	GrafanaDNS    *string        `json:"grafanaDns"`
}

type RepositoryConnection struct {
	PageInfo PageInfo          `json:"pageInfo"`
	Edges    []*RepositoryEdge `json:"edges"`
}

type RepositoryContext struct {
	Repository string                 `json:"repository"`
	Context    map[string]interface{} `json:"context"`
}

type RepositoryEdge struct {
	Node   *Repository `json:"node"`
	Cursor *string     `json:"cursor"`
}

type ResourceSpec struct {
	CPU    *string `json:"cpu"`
	Memory *string `json:"memory"`
}

type Resources struct {
	Limits   *ResourceSpec `json:"limits"`
	Requests *ResourceSpec `json:"requests"`
}

type Revision struct {
	ID         string  `json:"id"`
	Version    string  `json:"version"`
	Git        GitRef  `json:"git"`
	Sha        *string `json:"sha"`
	InsertedAt *string `json:"insertedAt"`
	UpdatedAt  *string `json:"updatedAt"`
}

type RevisionConnection struct {
	PageInfo PageInfo        `json:"pageInfo"`
	Edges    []*RevisionEdge `json:"edges"`
}

type RevisionEdge struct {
	Node   *Revision `json:"node"`
	Cursor *string   `json:"cursor"`
}

type Role struct {
	ID           string         `json:"id"`
	Name         string         `json:"name"`
	Description  *string        `json:"description"`
	Repositories []*string      `json:"repositories"`
	Permissions  []*Permission  `json:"permissions"`
	RoleBindings []*RoleBinding `json:"roleBindings"`
	InsertedAt   *string        `json:"insertedAt"`
	UpdatedAt    *string        `json:"updatedAt"`
}

type RoleAttributes struct {
	Name         *string              `json:"name,omitempty"`
	Description  *string              `json:"description,omitempty"`
	Repositories []*string            `json:"repositories,omitempty"`
	RoleBindings []*BindingAttributes `json:"roleBindings,omitempty"`
	Permissions  []*Permission        `json:"permissions,omitempty"`
}

type RoleBinding struct {
	ID         string  `json:"id"`
	User       *User   `json:"user"`
	Group      *Group  `json:"group"`
	InsertedAt *string `json:"insertedAt"`
	UpdatedAt  *string `json:"updatedAt"`
}

type RoleConnection struct {
	PageInfo PageInfo    `json:"pageInfo"`
	Edges    []*RoleEdge `json:"edges"`
}

type RoleEdge struct {
	Node   *Role   `json:"node"`
	Cursor *string `json:"cursor"`
}

type RollingUpdate struct {
	MaxSurge       *int64 `json:"maxSurge"`
	MaxUnavailable *int64 `json:"maxUnavailable"`
}

type Runbook struct {
	Name       string                      `json:"name"`
	Spec       RunbookSpec                 `json:"spec"`
	Status     *RunbookStatus              `json:"status"`
	Data       []*RunbookData              `json:"data"`
	Executions *RunbookExecutionConnection `json:"executions"`
}

type RunbookAction struct {
	Name          string               `json:"name"`
	Type          string               `json:"type"`
	Configuration *ConfigurationAction `json:"configuration"`
}

type RunbookActionInput struct {
	Action  string                 `json:"action"`
	Context map[string]interface{} `json:"context"`
}

type RunbookActionResponse struct {
	RedirectTo *string `json:"redirectTo"`
}

type RunbookAlertStatus struct {
	Name        string                 `json:"name"`
	StartsAt    *string                `json:"startsAt"`
	Fingerprint *string                `json:"fingerprint"`
	Annotations map[string]interface{} `json:"annotations"`
	Labels      map[string]interface{} `json:"labels"`
}

type RunbookContext struct {
	TimeseriesStart *int64  `json:"timeseriesStart,omitempty"`
	TimeseriesStep  *string `json:"timeseriesStep,omitempty"`
}

type RunbookData struct {
	Name       string             `json:"name"`
	Source     *RunbookDatasource `json:"source"`
	Kubernetes KubernetesData     `json:"kubernetes"`
	Prometheus []*MetricResponse  `json:"prometheus"`
	Nodes      []*Node            `json:"nodes"`
}

type RunbookDatasource struct {
	Name       string                `json:"name"`
	Type       string                `json:"type"`
	Prometheus *PrometheusDatasource `json:"prometheus"`
	Kubernetes *KubernetesDatasource `json:"kubernetes"`
}

type RunbookExecution struct {
	ID         string                 `json:"id"`
	Name       string                 `json:"name"`
	Namespace  string                 `json:"namespace"`
	Context    map[string]interface{} `json:"context"`
	User       *User                  `json:"user"`
	InsertedAt *string                `json:"insertedAt"`
	UpdatedAt  *string                `json:"updatedAt"`
}

type RunbookExecutionConnection struct {
	PageInfo PageInfo                `json:"pageInfo"`
	Edges    []*RunbookExecutionEdge `json:"edges"`
}

type RunbookExecutionEdge struct {
	Node   *RunbookExecution `json:"node"`
	Cursor *string           `json:"cursor"`
}

type RunbookSpec struct {
	Name        string                 `json:"name"`
	Description *string                `json:"description"`
	Display     map[string]interface{} `json:"display"`
	Datasources []*RunbookDatasource   `json:"datasources"`
	Actions     []*RunbookAction       `json:"actions"`
}

type RunbookStatus struct {
	Alerts []*RunbookAlertStatus `json:"alerts"`
}

type RunningState struct {
	StartedAt *string `json:"startedAt"`
}

type Secret struct {
	Metadata Metadata               `json:"metadata"`
	Type     *string                `json:"type"`
	Data     map[string]interface{} `json:"data"`
}

type SecretKeySelector struct {
	Name string  `json:"name"`
	Key  *string `json:"key"`
}

type Service struct {
	Metadata Metadata      `json:"metadata"`
	Status   ServiceStatus `json:"status"`
	Spec     ServiceSpec   `json:"spec"`
	Pods     []*Pod        `json:"pods"`
	Raw      string        `json:"raw"`
	Events   []*Event      `json:"events"`
}

type ServiceComponent struct {
	ID        string          `json:"id"`
	State     *ComponentState `json:"state"`
	Synced    bool            `json:"synced"`
	Group     string          `json:"group"`
	Version   string          `json:"version"`
	Kind      string          `json:"kind"`
	Namespace string          `json:"namespace"`
	Name      string          `json:"name"`
}

type ServiceConfiguration struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ServiceDeployment struct {
	ID            string                  `json:"id"`
	Name          string                  `json:"name"`
	Namespace     string                  `json:"namespace"`
	Version       string                  `json:"version"`
	Git           GitRef                  `json:"git"`
	Sha           *string                 `json:"sha"`
	Tarball       *string                 `json:"tarball"`
	DeletedAt     *string                 `json:"deletedAt"`
	Repository    *GitRepository          `json:"repository"`
	ReadBindings  []*PolicyBinding        `json:"readBindings"`
	WriteBindings []*PolicyBinding        `json:"writeBindings"`
	Revision      *Revision               `json:"revision"`
	Configuration []*ServiceConfiguration `json:"configuration"`
	Components    []*ServiceComponent     `json:"components"`
	Revisions     *RevisionConnection     `json:"revisions"`
	Editable      *bool                   `json:"editable"`
	InsertedAt    *string                 `json:"insertedAt"`
	UpdatedAt     *string                 `json:"updatedAt"`
}

type ServiceDeploymentAttributes struct {
	Name          string                     `json:"name"`
	Namespace     string                     `json:"namespace"`
	Version       *string                    `json:"version,omitempty"`
	RepositoryID  string                     `json:"repositoryId"`
	Git           GitRefAttributes           `json:"git"`
	Configuration []*ConfigAttributes        `json:"configuration,omitempty"`
	ReadBindings  []*PolicyBindingAttributes `json:"readBindings,omitempty"`
	WriteBindings []*PolicyBindingAttributes `json:"writeBindings,omitempty"`
}

type ServiceDeploymentConnection struct {
	PageInfo PageInfo                 `json:"pageInfo"`
	Edges    []*ServiceDeploymentEdge `json:"edges"`
}

type ServiceDeploymentEdge struct {
	Node   *ServiceDeployment `json:"node"`
	Cursor *string            `json:"cursor"`
}

type ServicePort struct {
	Name       *string `json:"name"`
	Protocol   *string `json:"protocol"`
	Port       *int64  `json:"port"`
	TargetPort *string `json:"targetPort"`
}

type ServiceSpec struct {
	Type      *string                `json:"type"`
	ClusterIP *string                `json:"clusterIp"`
	Selector  map[string]interface{} `json:"selector"`
	Ports     []*ServicePort         `json:"ports"`
}

type ServiceStatus struct {
	LoadBalancer *LoadBalancerStatus `json:"loadBalancer"`
}

type ServiceUpdateAttributes struct {
	Version       *string             `json:"version,omitempty"`
	Git           GitRefAttributes    `json:"git"`
	Configuration []*ConfigAttributes `json:"configuration,omitempty"`
}

type SMTP struct {
	Server   *string `json:"server"`
	Port     *int64  `json:"port"`
	Password *string `json:"password"`
	Sender   *string `json:"sender"`
	User     *string `json:"user"`
}

type SMTPInput struct {
	Server   *string `json:"server,omitempty"`
	Port     *int64  `json:"port,omitempty"`
	Password *string `json:"password,omitempty"`
	Sender   *string `json:"sender,omitempty"`
	User     *string `json:"user,omitempty"`
}

type Stack struct {
	ID         string           `json:"id"`
	Name       string           `json:"name"`
	Bundles    []*Recipe        `json:"bundles"`
	Sections   []*RecipeSection `json:"sections"`
	InsertedAt *string          `json:"insertedAt"`
	UpdatedAt  *string          `json:"updatedAt"`
}

type StatefulSet struct {
	Metadata Metadata          `json:"metadata"`
	Status   StatefulSetStatus `json:"status"`
	Spec     StatefulSetSpec   `json:"spec"`
	Pods     []*Pod            `json:"pods"`
	Raw      string            `json:"raw"`
	Events   []*Event          `json:"events"`
}

func (StatefulSet) IsKubernetesData() {}

type StatefulSetSpec struct {
	Replicas    *int64  `json:"replicas"`
	ServiceName *string `json:"serviceName"`
}

type StatefulSetStatus struct {
	CurrentReplicas *int64 `json:"currentReplicas"`
	Replicas        *int64 `json:"replicas"`
	ReadyReplicas   *int64 `json:"readyReplicas"`
	UpdatedReplicas *int64 `json:"updatedReplicas"`
}

type StatusComponent struct {
	Group  *string `json:"group"`
	Kind   string  `json:"kind"`
	Name   string  `json:"name"`
	Status string  `json:"status"`
}

type StatusCondition struct {
	Message string `json:"message"`
	Reason  string `json:"reason"`
	Status  string `json:"status"`
	Type    string `json:"type"`
}

type Taint struct {
	Key    string `json:"key"`
	Value  string `json:"value"`
	Effect string `json:"effect"`
}

type TaintAttributes struct {
	Key    string `json:"key"`
	Value  string `json:"value"`
	Effect string `json:"effect"`
}

type TerminatedState struct {
	ExitCode   *int64  `json:"exitCode"`
	FinishedAt *string `json:"finishedAt"`
	StartedAt  *string `json:"startedAt"`
	Message    *string `json:"message"`
	Reason     *string `json:"reason"`
}

type UpgradePolicy struct {
	ID           string            `json:"id"`
	Name         string            `json:"name"`
	Description  *string           `json:"description"`
	Repositories []*string         `json:"repositories"`
	Type         UpgradePolicyType `json:"type"`
	Target       string            `json:"target"`
	Weight       *int64            `json:"weight"`
	InsertedAt   *string           `json:"insertedAt"`
	UpdatedAt    *string           `json:"updatedAt"`
}

type UpgradePolicyAttributes struct {
	Name         string            `json:"name"`
	Description  *string           `json:"description,omitempty"`
	Target       string            `json:"target"`
	Type         UpgradePolicyType `json:"type"`
	Repositories []*string         `json:"repositories,omitempty"`
	Weight       *int64            `json:"weight,omitempty"`
}

type User struct {
	ID                  string     `json:"id"`
	Name                string     `json:"name"`
	Email               string     `json:"email"`
	DeletedAt           *string    `json:"deletedAt"`
	Profile             *string    `json:"profile"`
	PluralID            *string    `json:"pluralId"`
	Roles               *UserRoles `json:"roles"`
	ReadTimestamp       *string    `json:"readTimestamp"`
	BuildTimestamp      *string    `json:"buildTimestamp"`
	BoundRoles          []*Role    `json:"boundRoles"`
	Jwt                 *string    `json:"jwt"`
	UnreadNotifications *int64     `json:"unreadNotifications"`
	BackgroundColor     *string    `json:"backgroundColor"`
	InsertedAt          *string    `json:"insertedAt"`
	UpdatedAt           *string    `json:"updatedAt"`
}

type UserAttributes struct {
	Name     *string             `json:"name,omitempty"`
	Email    *string             `json:"email,omitempty"`
	Password *string             `json:"password,omitempty"`
	Roles    *UserRoleAttributes `json:"roles,omitempty"`
}

type UserConnection struct {
	PageInfo PageInfo    `json:"pageInfo"`
	Edges    []*UserEdge `json:"edges"`
}

type UserEdge struct {
	Node   *User   `json:"node"`
	Cursor *string `json:"cursor"`
}

type UserRoleAttributes struct {
	Admin *bool `json:"admin,omitempty"`
}

type UserRoles struct {
	Admin *bool `json:"admin"`
}

type VerticalPodAutoscaler struct {
	Metadata Metadata                     `json:"metadata"`
	Spec     VerticalPodAutoscalerSpec    `json:"spec"`
	Status   *VerticalPodAutoscalerStatus `json:"status"`
}

type VerticalPodAutoscalerSpec struct {
	TargetRef    CrossVersionResourceTarget        `json:"targetRef"`
	UpdatePolicy VerticalPodAutoscalerUpdatePolicy `json:"updatePolicy"`
}

type VerticalPodAutoscalerStatus struct {
	Recommendation *Recommendation `json:"recommendation"`
}

type VerticalPodAutoscalerUpdatePolicy struct {
	UpdateMode *string `json:"updateMode"`
}

type WaitingState struct {
	Message *string `json:"message"`
	Reason  *string `json:"reason"`
}

type Webhook struct {
	ID         string        `json:"id"`
	URL        string        `json:"url"`
	Health     WebhookHealth `json:"health"`
	Type       WebhookType   `json:"type"`
	InsertedAt *string       `json:"insertedAt"`
	UpdatedAt  *string       `json:"updatedAt"`
}

type WebhookAttributes struct {
	URL string `json:"url"`
}

type WebhookConnection struct {
	PageInfo PageInfo       `json:"pageInfo"`
	Edges    []*WebhookEdge `json:"edges"`
}

type WebhookEdge struct {
	Node   *Webhook `json:"node"`
	Cursor *string  `json:"cursor"`
}

type WireguardPeer struct {
	Metadata Metadata             `json:"metadata"`
	Status   *WireguardPeerStatus `json:"status"`
	Spec     WireguardPeerSpec    `json:"spec"`
	Config   *string              `json:"config"`
	User     *User                `json:"user"`
	Raw      string               `json:"raw"`
}

type WireguardPeerSpec struct {
	WireguardRef *string `json:"wireguardRef"`
	Address      *string `json:"address"`
	PublicKey    *string `json:"publicKey"`
}

type WireguardPeerStatus struct {
	Ready      *bool              `json:"ready"`
	Conditions []*StatusCondition `json:"conditions"`
}

type AuditAction string

const (
	AuditActionCreate  AuditAction = "CREATE"
	AuditActionUpdate  AuditAction = "UPDATE"
	AuditActionDelete  AuditAction = "DELETE"
	AuditActionApprove AuditAction = "APPROVE"
	AuditActionCancel  AuditAction = "CANCEL"
)

var AllAuditAction = []AuditAction{
	AuditActionCreate,
	AuditActionUpdate,
	AuditActionDelete,
	AuditActionApprove,
	AuditActionCancel,
}

func (e AuditAction) IsValid() bool {
	switch e {
	case AuditActionCreate, AuditActionUpdate, AuditActionDelete, AuditActionApprove, AuditActionCancel:
		return true
	}
	return false
}

func (e AuditAction) String() string {
	return string(e)
}

func (e *AuditAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuditAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuditAction", str)
	}
	return nil
}

func (e AuditAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuditType string

const (
	AuditTypeBuild              AuditType = "BUILD"
	AuditTypePod                AuditType = "POD"
	AuditTypeConfiguration      AuditType = "CONFIGURATION"
	AuditTypeUser               AuditType = "USER"
	AuditTypeGroup              AuditType = "GROUP"
	AuditTypeRole               AuditType = "ROLE"
	AuditTypeGroupMember        AuditType = "GROUP_MEMBER"
	AuditTypePolicy             AuditType = "POLICY"
	AuditTypeTempToken          AuditType = "TEMP_TOKEN"
	AuditTypeService            AuditType = "SERVICE"
	AuditTypeCluster            AuditType = "CLUSTER"
	AuditTypeClusterProvider    AuditType = "CLUSTER_PROVIDER"
	AuditTypeGitRepository      AuditType = "GIT_REPOSITORY"
	AuditTypeDeploymentSettings AuditType = "DEPLOYMENT_SETTINGS"
)

var AllAuditType = []AuditType{
	AuditTypeBuild,
	AuditTypePod,
	AuditTypeConfiguration,
	AuditTypeUser,
	AuditTypeGroup,
	AuditTypeRole,
	AuditTypeGroupMember,
	AuditTypePolicy,
	AuditTypeTempToken,
	AuditTypeService,
	AuditTypeCluster,
	AuditTypeClusterProvider,
	AuditTypeGitRepository,
	AuditTypeDeploymentSettings,
}

func (e AuditType) IsValid() bool {
	switch e {
	case AuditTypeBuild, AuditTypePod, AuditTypeConfiguration, AuditTypeUser, AuditTypeGroup, AuditTypeRole, AuditTypeGroupMember, AuditTypePolicy, AuditTypeTempToken, AuditTypeService, AuditTypeCluster, AuditTypeClusterProvider, AuditTypeGitRepository, AuditTypeDeploymentSettings:
		return true
	}
	return false
}

func (e AuditType) String() string {
	return string(e)
}

func (e *AuditType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuditType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuditType", str)
	}
	return nil
}

func (e AuditType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthMethod string

const (
	AuthMethodBasic AuthMethod = "BASIC"
	AuthMethodSSH   AuthMethod = "SSH"
)

var AllAuthMethod = []AuthMethod{
	AuthMethodBasic,
	AuthMethodSSH,
}

func (e AuthMethod) IsValid() bool {
	switch e {
	case AuthMethodBasic, AuthMethodSSH:
		return true
	}
	return false
}

func (e AuthMethod) String() string {
	return string(e)
}

func (e *AuthMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthMethod", str)
	}
	return nil
}

func (e AuthMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AutoscalingTarget string

const (
	AutoscalingTargetStatefulset AutoscalingTarget = "STATEFULSET"
	AutoscalingTargetDeployment  AutoscalingTarget = "DEPLOYMENT"
)

var AllAutoscalingTarget = []AutoscalingTarget{
	AutoscalingTargetStatefulset,
	AutoscalingTargetDeployment,
}

func (e AutoscalingTarget) IsValid() bool {
	switch e {
	case AutoscalingTargetStatefulset, AutoscalingTargetDeployment:
		return true
	}
	return false
}

func (e AutoscalingTarget) String() string {
	return string(e)
}

func (e *AutoscalingTarget) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AutoscalingTarget(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AutoscalingTarget", str)
	}
	return nil
}

func (e AutoscalingTarget) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BuildType string

const (
	BuildTypeDeploy    BuildType = "DEPLOY"
	BuildTypeBounce    BuildType = "BOUNCE"
	BuildTypeApproval  BuildType = "APPROVAL"
	BuildTypeInstall   BuildType = "INSTALL"
	BuildTypeDestroy   BuildType = "DESTROY"
	BuildTypeDedicated BuildType = "DEDICATED"
	BuildTypeConfig    BuildType = "CONFIG"
)

var AllBuildType = []BuildType{
	BuildTypeDeploy,
	BuildTypeBounce,
	BuildTypeApproval,
	BuildTypeInstall,
	BuildTypeDestroy,
	BuildTypeDedicated,
	BuildTypeConfig,
}

func (e BuildType) IsValid() bool {
	switch e {
	case BuildTypeDeploy, BuildTypeBounce, BuildTypeApproval, BuildTypeInstall, BuildTypeDestroy, BuildTypeDedicated, BuildTypeConfig:
		return true
	}
	return false
}

func (e BuildType) String() string {
	return string(e)
}

func (e *BuildType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BuildType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BuildType", str)
	}
	return nil
}

func (e BuildType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ComponentState string

const (
	ComponentStateRunning ComponentState = "RUNNING"
	ComponentStatePending ComponentState = "PENDING"
	ComponentStateFailed  ComponentState = "FAILED"
)

var AllComponentState = []ComponentState{
	ComponentStateRunning,
	ComponentStatePending,
	ComponentStateFailed,
}

func (e ComponentState) IsValid() bool {
	switch e {
	case ComponentStateRunning, ComponentStatePending, ComponentStateFailed:
		return true
	}
	return false
}

func (e ComponentState) String() string {
	return string(e)
}

func (e *ComponentState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComponentState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComponentState", str)
	}
	return nil
}

func (e ComponentState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Delta string

const (
	DeltaCreate Delta = "CREATE"
	DeltaUpdate Delta = "UPDATE"
	DeltaDelete Delta = "DELETE"
)

var AllDelta = []Delta{
	DeltaCreate,
	DeltaUpdate,
	DeltaDelete,
}

func (e Delta) IsValid() bool {
	switch e {
	case DeltaCreate, DeltaUpdate, DeltaDelete:
		return true
	}
	return false
}

func (e Delta) String() string {
	return string(e)
}

func (e *Delta) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Delta(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Delta", str)
	}
	return nil
}

func (e Delta) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GitHealth string

const (
	GitHealthPullable GitHealth = "PULLABLE"
	GitHealthFailed   GitHealth = "FAILED"
)

var AllGitHealth = []GitHealth{
	GitHealthPullable,
	GitHealthFailed,
}

func (e GitHealth) IsValid() bool {
	switch e {
	case GitHealthPullable, GitHealthFailed:
		return true
	}
	return false
}

func (e GitHealth) String() string {
	return string(e)
}

func (e *GitHealth) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GitHealth(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GitHealth", str)
	}
	return nil
}

func (e GitHealth) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationStatus string

const (
	NotificationStatusFiring   NotificationStatus = "FIRING"
	NotificationStatusResolved NotificationStatus = "RESOLVED"
)

var AllNotificationStatus = []NotificationStatus{
	NotificationStatusFiring,
	NotificationStatusResolved,
}

func (e NotificationStatus) IsValid() bool {
	switch e {
	case NotificationStatusFiring, NotificationStatusResolved:
		return true
	}
	return false
}

func (e NotificationStatus) String() string {
	return string(e)
}

func (e *NotificationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationStatus", str)
	}
	return nil
}

func (e NotificationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Permission string

const (
	PermissionRead      Permission = "READ"
	PermissionConfigure Permission = "CONFIGURE"
	PermissionDeploy    Permission = "DEPLOY"
	PermissionOperate   Permission = "OPERATE"
)

var AllPermission = []Permission{
	PermissionRead,
	PermissionConfigure,
	PermissionDeploy,
	PermissionOperate,
}

func (e Permission) IsValid() bool {
	switch e {
	case PermissionRead, PermissionConfigure, PermissionDeploy, PermissionOperate:
		return true
	}
	return false
}

func (e Permission) String() string {
	return string(e)
}

func (e *Permission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Permission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Permission", str)
	}
	return nil
}

func (e Permission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReadType string

const (
	ReadTypeNotification ReadType = "NOTIFICATION"
	ReadTypeBuild        ReadType = "BUILD"
)

var AllReadType = []ReadType{
	ReadTypeNotification,
	ReadTypeBuild,
}

func (e ReadType) IsValid() bool {
	switch e {
	case ReadTypeNotification, ReadTypeBuild:
		return true
	}
	return false
}

func (e ReadType) String() string {
	return string(e)
}

func (e *ReadType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReadType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReadType", str)
	}
	return nil
}

func (e ReadType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Severity string

const (
	SeverityNone     Severity = "NONE"
	SeverityLow      Severity = "LOW"
	SeverityMedium   Severity = "MEDIUM"
	SeverityHigh     Severity = "HIGH"
	SeverityCritical Severity = "CRITICAL"
)

var AllSeverity = []Severity{
	SeverityNone,
	SeverityLow,
	SeverityMedium,
	SeverityHigh,
	SeverityCritical,
}

func (e Severity) IsValid() bool {
	switch e {
	case SeverityNone, SeverityLow, SeverityMedium, SeverityHigh, SeverityCritical:
		return true
	}
	return false
}

func (e Severity) String() string {
	return string(e)
}

func (e *Severity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Severity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Severity", str)
	}
	return nil
}

func (e Severity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusQueued     Status = "QUEUED"
	StatusRunning    Status = "RUNNING"
	StatusSuccessful Status = "SUCCESSFUL"
	StatusFailed     Status = "FAILED"
	StatusCancelled  Status = "CANCELLED"
	StatusPending    Status = "PENDING"
)

var AllStatus = []Status{
	StatusQueued,
	StatusRunning,
	StatusSuccessful,
	StatusFailed,
	StatusCancelled,
	StatusPending,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusQueued, StatusRunning, StatusSuccessful, StatusFailed, StatusCancelled, StatusPending:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Tool string

const (
	ToolHelm      Tool = "HELM"
	ToolTerraform Tool = "TERRAFORM"
)

var AllTool = []Tool{
	ToolHelm,
	ToolTerraform,
}

func (e Tool) IsValid() bool {
	switch e {
	case ToolHelm, ToolTerraform:
		return true
	}
	return false
}

func (e Tool) String() string {
	return string(e)
}

func (e *Tool) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Tool(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Tool", str)
	}
	return nil
}

func (e Tool) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UpgradePolicyType string

const (
	UpgradePolicyTypeDeploy   UpgradePolicyType = "DEPLOY"
	UpgradePolicyTypeApproval UpgradePolicyType = "APPROVAL"
	UpgradePolicyTypeIgnore   UpgradePolicyType = "IGNORE"
)

var AllUpgradePolicyType = []UpgradePolicyType{
	UpgradePolicyTypeDeploy,
	UpgradePolicyTypeApproval,
	UpgradePolicyTypeIgnore,
}

func (e UpgradePolicyType) IsValid() bool {
	switch e {
	case UpgradePolicyTypeDeploy, UpgradePolicyTypeApproval, UpgradePolicyTypeIgnore:
		return true
	}
	return false
}

func (e UpgradePolicyType) String() string {
	return string(e)
}

func (e *UpgradePolicyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UpgradePolicyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UpgradePolicyType", str)
	}
	return nil
}

func (e UpgradePolicyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WebhookHealth string

const (
	WebhookHealthHealthy   WebhookHealth = "HEALTHY"
	WebhookHealthUnhealthy WebhookHealth = "UNHEALTHY"
)

var AllWebhookHealth = []WebhookHealth{
	WebhookHealthHealthy,
	WebhookHealthUnhealthy,
}

func (e WebhookHealth) IsValid() bool {
	switch e {
	case WebhookHealthHealthy, WebhookHealthUnhealthy:
		return true
	}
	return false
}

func (e WebhookHealth) String() string {
	return string(e)
}

func (e *WebhookHealth) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookHealth(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookHealth", str)
	}
	return nil
}

func (e WebhookHealth) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WebhookType string

const (
	WebhookTypePiazza WebhookType = "PIAZZA"
	WebhookTypeSLACk  WebhookType = "SLACK"
)

var AllWebhookType = []WebhookType{
	WebhookTypePiazza,
	WebhookTypeSLACk,
}

func (e WebhookType) IsValid() bool {
	switch e {
	case WebhookTypePiazza, WebhookTypeSLACk:
		return true
	}
	return false
}

func (e WebhookType) String() string {
	return string(e)
}

func (e *WebhookType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookType", str)
	}
	return nil
}

func (e WebhookType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
