// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gqlclient

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type RootQueryType struct {
	Configuration         *ConsoleConfiguration        "json:\"configuration\" graphql:\"configuration\""
	ExternalToken         *string                      "json:\"externalToken\" graphql:\"externalToken\""
	Builds                *BuildConnection             "json:\"builds\" graphql:\"builds\""
	Build                 *Build                       "json:\"build\" graphql:\"build\""
	BuildInfo             *BuildInfo                   "json:\"buildInfo\" graphql:\"buildInfo\""
	Users                 *UserConnection              "json:\"users\" graphql:\"users\""
	LoginInfo             *LoginInfo                   "json:\"loginInfo\" graphql:\"loginInfo\""
	Me                    *User                        "json:\"me\" graphql:\"me\""
	Invite                *Invite                      "json:\"invite\" graphql:\"invite\""
	Groups                *GroupConnection             "json:\"groups\" graphql:\"groups\""
	GroupMembers          *GroupMemberConnection       "json:\"groupMembers\" graphql:\"groupMembers\""
	Role                  *Role                        "json:\"role\" graphql:\"role\""
	Roles                 *RoleConnection              "json:\"roles\" graphql:\"roles\""
	Notifications         *NotificationConnection      "json:\"notifications\" graphql:\"notifications\""
	TemporaryToken        *string                      "json:\"temporaryToken\" graphql:\"temporaryToken\""
	AccessTokens          *AccessTokenConnection       "json:\"accessTokens\" graphql:\"accessTokens\""
	AccessToken           *AccessToken                 "json:\"accessToken\" graphql:\"accessToken\""
	Dashboards            []*Dashboard                 "json:\"dashboards\" graphql:\"dashboards\""
	Dashboard             *Dashboard                   "json:\"dashboard\" graphql:\"dashboard\""
	Metric                []*MetricResponse            "json:\"metric\" graphql:\"metric\""
	Logs                  []*LogStream                 "json:\"logs\" graphql:\"logs\""
	ScalingRecommendation *VerticalPodAutoscaler       "json:\"scalingRecommendation\" graphql:\"scalingRecommendation\""
	ConfigMap             *ConfigMap                   "json:\"configMap\" graphql:\"configMap\""
	Secret                *Secret                      "json:\"secret\" graphql:\"secret\""
	ConfigMaps            []*ConfigMap                 "json:\"configMaps\" graphql:\"configMaps\""
	Secrets               []*Secret                    "json:\"secrets\" graphql:\"secrets\""
	Service               *Service                     "json:\"service\" graphql:\"service\""
	ClusterInfo           *ClusterInfo                 "json:\"clusterInfo\" graphql:\"clusterInfo\""
	Deployment            *Deployment                  "json:\"deployment\" graphql:\"deployment\""
	StatefulSet           *StatefulSet                 "json:\"statefulSet\" graphql:\"statefulSet\""
	Ingress               *Ingress                     "json:\"ingress\" graphql:\"ingress\""
	Nodes                 []*Node                      "json:\"nodes\" graphql:\"nodes\""
	Node                  *Node                        "json:\"node\" graphql:\"node\""
	CronJob               *CronJob                     "json:\"cronJob\" graphql:\"cronJob\""
	Job                   *Job                         "json:\"job\" graphql:\"job\""
	Certificate           *Certificate                 "json:\"certificate\" graphql:\"certificate\""
	Pod                   *Pod                         "json:\"pod\" graphql:\"pod\""
	Pods                  *PodConnection               "json:\"pods\" graphql:\"pods\""
	WireguardPeers        []*WireguardPeer             "json:\"wireguardPeers\" graphql:\"wireguardPeers\""
	MyWireguardPeers      []*WireguardPeer             "json:\"myWireguardPeers\" graphql:\"myWireguardPeers\""
	WireguardPeer         *WireguardPeer               "json:\"wireguardPeer\" graphql:\"wireguardPeer\""
	CachedPods            []*Pod                       "json:\"cachedPods\" graphql:\"cachedPods\""
	Namespaces            []*Namespace                 "json:\"namespaces\" graphql:\"namespaces\""
	LogFilters            []*LogFilter                 "json:\"logFilters\" graphql:\"logFilters\""
	NodeMetrics           []*NodeMetric                "json:\"nodeMetrics\" graphql:\"nodeMetrics\""
	NodeMetric            *NodeMetric                  "json:\"nodeMetric\" graphql:\"nodeMetric\""
	ConfigurationOverlays []*ConfigurationOverlay      "json:\"configurationOverlays\" graphql:\"configurationOverlays\""
	Audits                *AuditConnection             "json:\"audits\" graphql:\"audits\""
	AuditMetrics          []*AuditMetric               "json:\"auditMetrics\" graphql:\"auditMetrics\""
	Ai                    *string                      "json:\"ai\" graphql:\"ai\""
	Account               *Account                     "json:\"account\" graphql:\"account\""
	Installations         *InstallationConnection      "json:\"installations\" graphql:\"installations\""
	Applications          []*Application               "json:\"applications\" graphql:\"applications\""
	Application           *Application                 "json:\"application\" graphql:\"application\""
	Repository            *Repository                  "json:\"repository\" graphql:\"repository\""
	Repositories          *RepositoryConnection        "json:\"repositories\" graphql:\"repositories\""
	Recipes               *RecipeConnection            "json:\"recipes\" graphql:\"recipes\""
	Context               []*RepositoryContext         "json:\"context\" graphql:\"context\""
	PluralContext         *PluralContext               "json:\"pluralContext\" graphql:\"pluralContext\""
	Recipe                *Recipe                      "json:\"recipe\" graphql:\"recipe\""
	Stack                 *Stack                       "json:\"stack\" graphql:\"stack\""
	SMTP                  *SMTP                        "json:\"smtp\" graphql:\"smtp\""
	UpgradePolicies       []*UpgradePolicy             "json:\"upgradePolicies\" graphql:\"upgradePolicies\""
	Runbook               *Runbook                     "json:\"runbook\" graphql:\"runbook\""
	Runbooks              []*Runbook                   "json:\"runbooks\" graphql:\"runbooks\""
	Webhooks              *WebhookConnection           "json:\"webhooks\" graphql:\"webhooks\""
	PostgresDatabases     []*Postgresql                "json:\"postgresDatabases\" graphql:\"postgresDatabases\""
	PostgresDatabase      *Postgresql                  "json:\"postgresDatabase\" graphql:\"postgresDatabase\""
	GitRepositories       *GitRepositoryConnection     "json:\"gitRepositories\" graphql:\"gitRepositories\""
	Clusters              *ClusterConnection           "json:\"clusters\" graphql:\"clusters\""
	ClusterProviders      *ClusterProviderConnection   "json:\"clusterProviders\" graphql:\"clusterProviders\""
	Cluster               *Cluster                     "json:\"cluster\" graphql:\"cluster\""
	ClusterProvider       *ClusterProvider             "json:\"clusterProvider\" graphql:\"clusterProvider\""
	ServiceDeployments    *ServiceDeploymentConnection "json:\"serviceDeployments\" graphql:\"serviceDeployments\""
	ServiceDeployment     *ServiceDeployment           "json:\"serviceDeployment\" graphql:\"serviceDeployment\""
	ClusterServices       []*ServiceDeployment         "json:\"clusterServices\" graphql:\"clusterServices\""
	DeploymentSettings    *DeploymentSettings          "json:\"deploymentSettings\" graphql:\"deploymentSettings\""
}
type RootMutationType struct {
	CreateBuild              *Build                 "json:\"createBuild\" graphql:\"createBuild\""
	RestartBuild             *Build                 "json:\"restartBuild\" graphql:\"restartBuild\""
	CancelBuild              *Build                 "json:\"cancelBuild\" graphql:\"cancelBuild\""
	ApproveBuild             *Build                 "json:\"approveBuild\" graphql:\"approveBuild\""
	SignIn                   *User                  "json:\"signIn\" graphql:\"signIn\""
	LoginLink                *User                  "json:\"loginLink\" graphql:\"loginLink\""
	ReadNotifications        *User                  "json:\"readNotifications\" graphql:\"readNotifications\""
	Signup                   *User                  "json:\"signup\" graphql:\"signup\""
	OauthCallback            *User                  "json:\"oauthCallback\" graphql:\"oauthCallback\""
	CreateInvite             *Invite                "json:\"createInvite\" graphql:\"createInvite\""
	UpdateUser               *User                  "json:\"updateUser\" graphql:\"updateUser\""
	DeleteUser               *User                  "json:\"deleteUser\" graphql:\"deleteUser\""
	MarkRead                 *User                  "json:\"markRead\" graphql:\"markRead\""
	CreateGroup              *Group                 "json:\"createGroup\" graphql:\"createGroup\""
	DeleteGroup              *Group                 "json:\"deleteGroup\" graphql:\"deleteGroup\""
	UpdateGroup              *Group                 "json:\"updateGroup\" graphql:\"updateGroup\""
	CreateGroupMember        *GroupMember           "json:\"createGroupMember\" graphql:\"createGroupMember\""
	DeleteGroupMember        *GroupMember           "json:\"deleteGroupMember\" graphql:\"deleteGroupMember\""
	CreateRole               *Role                  "json:\"createRole\" graphql:\"createRole\""
	UpdateRole               *Role                  "json:\"updateRole\" graphql:\"updateRole\""
	DeleteRole               *Role                  "json:\"deleteRole\" graphql:\"deleteRole\""
	CreateAccessToken        *AccessToken           "json:\"createAccessToken\" graphql:\"createAccessToken\""
	DeleteAccessToken        *AccessToken           "json:\"deleteAccessToken\" graphql:\"deleteAccessToken\""
	DeleteCertificate        *bool                  "json:\"deleteCertificate\" graphql:\"deleteCertificate\""
	DeletePod                *Pod                   "json:\"deletePod\" graphql:\"deletePod\""
	DeleteJob                *Job                   "json:\"deleteJob\" graphql:\"deleteJob\""
	DeleteNode               *Node                  "json:\"deleteNode\" graphql:\"deleteNode\""
	OverlayConfiguration     *Build                 "json:\"overlayConfiguration\" graphql:\"overlayConfiguration\""
	CreatePeer               *WireguardPeer         "json:\"createPeer\" graphql:\"createPeer\""
	DeletePeer               *bool                  "json:\"deletePeer\" graphql:\"deletePeer\""
	InstallRecipe            *Build                 "json:\"installRecipe\" graphql:\"installRecipe\""
	InstallStack             *Build                 "json:\"installStack\" graphql:\"installStack\""
	UpdateSMTP               *SMTP                  "json:\"updateSmtp\" graphql:\"updateSmtp\""
	UpdateConfiguration      *Configuration         "json:\"updateConfiguration\" graphql:\"updateConfiguration\""
	CreateUpgradePolicy      *UpgradePolicy         "json:\"createUpgradePolicy\" graphql:\"createUpgradePolicy\""
	DeleteUpgradePolicy      *UpgradePolicy         "json:\"deleteUpgradePolicy\" graphql:\"deleteUpgradePolicy\""
	ExecuteRunbook           *RunbookActionResponse "json:\"executeRunbook\" graphql:\"executeRunbook\""
	CreateWebhook            *Webhook               "json:\"createWebhook\" graphql:\"createWebhook\""
	DeleteWebhook            *Webhook               "json:\"deleteWebhook\" graphql:\"deleteWebhook\""
	RestorePostgres          *Postgresql            "json:\"restorePostgres\" graphql:\"restorePostgres\""
	CreateGitRepository      *GitRepository         "json:\"createGitRepository\" graphql:\"createGitRepository\""
	CreateCluster            *Cluster               "json:\"createCluster\" graphql:\"createCluster\""
	UpdateCluster            *Cluster               "json:\"updateCluster\" graphql:\"updateCluster\""
	DeleteCluster            *Cluster               "json:\"deleteCluster\" graphql:\"deleteCluster\""
	CreateClusterProvider    *ClusterProvider       "json:\"createClusterProvider\" graphql:\"createClusterProvider\""
	UpdateClusterProvider    *ClusterProvider       "json:\"updateClusterProvider\" graphql:\"updateClusterProvider\""
	CreateServiceDeployment  *ServiceDeployment     "json:\"createServiceDeployment\" graphql:\"createServiceDeployment\""
	UpdateServiceDeployment  *ServiceDeployment     "json:\"updateServiceDeployment\" graphql:\"updateServiceDeployment\""
	DeleteServiceDeployment  *ServiceDeployment     "json:\"deleteServiceDeployment\" graphql:\"deleteServiceDeployment\""
	UpdateServiceComponents  *ServiceDeployment     "json:\"updateServiceComponents\" graphql:\"updateServiceComponents\""
	UpdateRbac               *bool                  "json:\"updateRbac\" graphql:\"updateRbac\""
	UpdateDeploymentSettings *DeploymentSettings    "json:\"updateDeploymentSettings\" graphql:\"updateDeploymentSettings\""
}
type SrvDeployment struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	Namespace string "json:\"namespace\" graphql:\"namespace\""
	Version   string "json:\"version\" graphql:\"version\""
}
type CreateServiceDeployment struct {
	CreateServiceDeployment *SrvDeployment "json:\"createServiceDeployment\" graphql:\"createServiceDeployment\""
}
type DeleteServiceDeployment struct {
	DeleteServiceDeployment *SrvDeployment "json:\"deleteServiceDeployment\" graphql:\"deleteServiceDeployment\""
}

const CreateServiceDeploymentDocument = `mutation CreateServiceDeployment ($clusterId: ID!, $attributes: ServiceDeploymentAttributes!) {
	createServiceDeployment(clusterId: $clusterId, attributes: $attributes) {
		... SrvDeployment
	}
}
fragment SrvDeployment on ServiceDeployment {
	id
	name
	namespace
	version
}
`

func (c *Client) CreateServiceDeployment(ctx context.Context, clusterID string, attributes ServiceDeploymentAttributes, httpRequestOptions ...client.HTTPRequestOption) (*CreateServiceDeployment, error) {
	vars := map[string]interface{}{
		"clusterId":  clusterID,
		"attributes": attributes,
	}

	var res CreateServiceDeployment
	if err := c.Client.Post(ctx, "CreateServiceDeployment", CreateServiceDeploymentDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const DeleteServiceDeploymentDocument = `mutation DeleteServiceDeployment ($id: ID!) {
	deleteServiceDeployment(id: $id) {
		... SrvDeployment
	}
}
fragment SrvDeployment on ServiceDeployment {
	id
	name
	namespace
	version
}
`

func (c *Client) DeleteServiceDeployment(ctx context.Context, id string, httpRequestOptions ...client.HTTPRequestOption) (*DeleteServiceDeployment, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res DeleteServiceDeployment
	if err := c.Client.Post(ctx, "DeleteServiceDeployment", DeleteServiceDeploymentDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
